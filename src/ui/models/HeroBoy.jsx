/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 mine.glb -T 
Files: mine.glb [11.61MB] > C:\Users\20155\Downloads\studying\Dev-Portfolio\Dev-Portfolio\public\models\mine-transformed.glb [1.13MB] (90%)
*/

import React, { useState } from "react";
import { useGraph } from "@react-three/fiber";
import { useGLTF, useProgress } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import * as THREE from "three";
import { useRef } from "react";
import { useGSAP } from "@gsap/react";
import gsap from "gsap";

export function HeroBoy(props) {
  const mouse = useRef(new THREE.Vector2());
  const group = useRef();
  const { scene } = useGLTF("/models/mine-transformed.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const [isIntroAnimationDone, setIsIntroAnimationDone] = useState(false);
  const { progress } = useProgress();

  useGSAP(() => {
    if (progress === 100 && !isIntroAnimationDone) {
      gsap.fromTo(
        group.current.rotation,
        { y: Math.PI },
        {
          y: 0,
          delay: 0.5,
          duration: 1.5,
          ease: "expo.inOut",
          onComplete: () => {
            setIsIntroAnimationDone(true);
          },
        }
      );
    }
    if (isIntroAnimationDone) {
      const handleMouseMove = (event) => {
        const { innerWidth, innerHeight } = window;
        mouse.current.x = (event.clientX / innerWidth) * 2 - 1; // Normalize between -1 and 1
        mouse.current.y = -(event.clientY / innerHeight) * 2 + 1; // Normalize between -1 and 1

        const target = new THREE.Vector3(mouse.current.x, mouse.current.y, 1);
        group.current.getObjectByName("Head").lookAt(target);
        group.current.rotation.y = target.x * 0.5;
      };

      window.addEventListener("mousemove", handleMouseMove);
      return () => window.removeEventListener("mousemove", handleMouseMove);
    }
  }, [isIntroAnimationDone]);
  return (
    <group ref={group} {...props} dispose={null}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name='Wolf3D_Avatar'
        geometry={nodes.Wolf3D_Avatar.geometry}
        material={materials.Wolf3D_Avatar}
        skeleton={nodes.Wolf3D_Avatar.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Avatar.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Avatar.morphTargetInfluences}
      />
    </group>
  );
}

useGLTF.preload("/models/mine-transformed.glb");
